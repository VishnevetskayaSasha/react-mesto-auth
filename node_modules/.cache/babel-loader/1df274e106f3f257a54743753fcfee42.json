{"ast":null,"code":"class Auth {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n  } // отдельно выносим проверку, чтоб не писать ее каждый раз\n\n\n  _checkLineOk(responce) {\n    if (responce.ok) {\n      // если у объекта responce поле ок = истина\n      return responce.json(); // тогла возвращаем реальные данные (если не написать return в следующий промис не передадутся данные)\n    }\n\n    return Promise.reject(`Ошибка: ${responce} `); // если статус не ок, возвращаем Promise.rejec (переводим в значение rejected (отклонено))\n  } // регистрация\n\n\n  registration(email, password) {\n    console.log(email);\n    return fetch(`${this._url}/signup`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"password\": password,\n        \"email\": email\n      })\n    }).then(responce => {\n      return this._checkLineOk(responce);\n    });\n  } // авторизация (вход)\n\n\n  login(_ref) {\n    let {\n      email,\n      password\n    } = _ref;\n    return fetch(`${this._url}/signin`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        \"password\": password,\n        \"email\": email\n      })\n    }).then(responce => {\n      return this._checkLineOk(responce);\n    });\n  } // проверка валидности токена и получения email для вставки в шапку сайта:\n\n\n  tokenValidity(token) {\n    return fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(responce => {\n      return this._checkLineOk(responce);\n    });\n  }\n\n}\n\nconst auth = new Auth({\n  url: \"https://auth.nomoreparties.co\",\n  headers: {\n    'Content-Type': 'application/json' // наш сервер ждет именно эту строчку (данные в формате json), некоторым серверам он не нужен для ответа\n\n  }\n});\nexport default auth;","map":{"version":3,"sources":["/Users/sasha/Desktop/react-mesto-auth/src/utils/Auth.js"],"names":["Auth","constructor","config","_url","url","_headers","headers","_checkLineOk","responce","ok","json","Promise","reject","registration","email","password","console","log","fetch","method","body","JSON","stringify","then","login","tokenValidity","token","auth"],"mappings":"AAAA,MAAMA,IAAN,CAAW;AACTC,EAAAA,WAAW,CAAEC,MAAF,EAAU;AACnB,SAAKC,IAAL,GAAYD,MAAM,CAACE,GAAnB;AACA,SAAKC,QAAL,GAAgBH,MAAM,CAACI,OAAvB;AACD,GAJQ,CAMT;;;AACAC,EAAAA,YAAY,CAACC,QAAD,EAAW;AACrB,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AAAG;AAClB,aAAOD,QAAQ,CAACE,IAAT,EAAP,CADe,CACS;AACzB;;AAAC,WAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,QAAS,GAAnC,CAAP,CAHmB,CAG2B;AACjD,GAXQ,CAaT;;;AACAK,EAAAA,YAAY,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,WAAOI,KAAK,CAAE,GAAE,KAAKf,IAAK,SAAd,EAAwB;AAClCgB,MAAAA,MAAM,EAAE,MAD0B;AAElCb,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFyB;AAKlCc,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB,oBAAYP,QADO;AAEnB,iBAASD;AAFU,OAAf;AAL4B,KAAxB,CAAL,CAUNS,IAVM,CAUAf,QAAD,IAAc;AAClB,aAAO,KAAKD,YAAL,CAAkBC,QAAlB,CAAP;AACD,KAZM,CAAP;AAaD,GA7BQ,CA+BT;;;AACAgB,EAAAA,KAAK,OAAoB;AAAA,QAAnB;AAACV,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAmB;AACvB,WAAOG,KAAK,CAAE,GAAE,KAAKf,IAAK,SAAd,EAAwB;AAClCgB,MAAAA,MAAM,EAAE,MAD0B;AAElCb,MAAAA,OAAO,EAAE,KAAKD,QAFoB;AAGlCe,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB,oBAAYP,QADO;AAEnB,iBAASD;AAFU,OAAf;AAH4B,KAAxB,CAAL,CAQNS,IARM,CAQAf,QAAD,IAAc;AAClB,aAAO,KAAKD,YAAL,CAAkBC,QAAlB,CAAP;AACD,KAVM,CAAP;AAWD,GA5CQ,CA8CT;;;AACAiB,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,WAAOR,KAAK,CAAE,GAAE,KAAKf,IAAK,WAAd,EAA0B;AACpCgB,MAAAA,MAAM,EAAE,KAD4B;AAEpCb,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAkB,UAASoB,KAAM;AAF1B;AAF2B,KAA1B,CAAL,CAONH,IAPM,CAOAf,QAAD,IAAc;AAClB,aAAO,KAAKD,YAAL,CAAkBC,QAAlB,CAAP;AACD,KATM,CAAP;AAUD;;AA1DQ;;AA6DX,MAAMmB,IAAI,GAAG,IAAI3B,IAAJ,CAAU;AACrBI,EAAAA,GAAG,EAAE,+BADgB;AAErBE,EAAAA,OAAO,EAAE;AACP,oBAAgB,kBADT,CAC4B;;AAD5B;AAFY,CAAV,CAAb;AAOA,eAAeqB,IAAf","sourcesContent":["class Auth {\n  constructor (config) { \n    this._url = config.url;\n    this._headers = config.headers; \n  }\n\n  // отдельно выносим проверку, чтоб не писать ее каждый раз\n  _checkLineOk(responce) {\n    if (responce.ok) {  // если у объекта responce поле ок = истина\n      return responce.json(); // тогла возвращаем реальные данные (если не написать return в следующий промис не передадутся данные)\n    } return Promise.reject(`Ошибка: ${responce} `) // если статус не ок, возвращаем Promise.rejec (переводим в значение rejected (отклонено))\n  }\n\n  // регистрация\n  registration(email, password) {\n    console.log(email)\n    return fetch(`${this._url}/signup`, { \n      method: \"POST\",  \n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        \"password\": password,\n        \"email\": email\n      }), \n    })\n    .then((responce) => {\n      return this._checkLineOk(responce)\n    }) \n  }\n\n  // авторизация (вход)\n  login({email, password}) {\n    return fetch(`${this._url}/signin`, { \n      method: \"POST\",  \n      headers: this._headers,\n      body: JSON.stringify({\n        \"password\": password,\n        \"email\": email\n      }),\n    })\n    .then((responce) => {\n      return this._checkLineOk(responce)\n    }) \n  }\n\n  // проверка валидности токена и получения email для вставки в шапку сайта:\n  tokenValidity(token) {\n    return fetch(`${this._url}/users/me`, { \n      method: \"GET\",  \n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      },\n    })\n    .then((responce) => {\n      return this._checkLineOk(responce)\n    }) \n  }\n}\n\nconst auth = new Auth ({\n  url: \"https://auth.nomoreparties.co\",\n  headers: {\n    'Content-Type': 'application/json' // наш сервер ждет именно эту строчку (данные в формате json), некоторым серверам он не нужен для ответа\n  } \n})\n\nexport default auth;"]},"metadata":{},"sourceType":"module"}