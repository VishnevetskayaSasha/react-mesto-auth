{"ast":null,"code":"class Api {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n  } // отдельно выносим проверку, чтоб не писать ее каждый раз\n\n\n  _checkLineOk(responce) {\n    if (responce.ok) {\n      // если у объекта responce поле ок = истина\n      return responce.json(); // тогла возвращаем реальные данные (если не написать return в следующий промис не передадутся данные)\n    }\n\n    return Promise.reject(`Ошибка: ${responce} `); // если статус не ок, возвращаем Promise.rejec (переводим в значение rejected (отклонено))\n  } // получение данных профиля \n\n\n  getUserInfo() {\n    // усли fetch ничего не возвращает, по умолчанию он вернет underfined\n    return fetch(`${this._url}users/me`, {\n      // первый аргумент - куда направляем запрос\n      // второй аргумент - объект с настройками\n      method: \"GET\",\n      // поумолчанию метод всегда GET, но лучше указывать, что б было явно видно\n      headers: this._headers\n    }).then(responce => {\n      return this._checkLineOk(responce);\n    }); //если сервер хоть чем-то ответил (даже статус 400), значит успешно, если сервер ничем не ответил, тогда fetch перейдет в значение rejected и мы перейдем в блок catch\n  } // получение карточек \n\n\n  getInitialCards() {\n    return fetch(`${this._url}cards`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(responce => {\n      return this._checkLineOk(responce);\n    });\n  } // редактирование данных профиля\n\n\n  editUserInfo(data) {\n    //чтобы передать данные на сервер нам необходимо по нашему api передавать в боди эти данные. \n    return fetch(`${this._url}users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(responce => {\n      return this._checkLineOk(responce);\n    });\n  } // редактирование аватара \n\n\n  editAvatar(data) {\n    return fetch(`${this._url}users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(responce => {\n      return this._checkLineOk(responce);\n    });\n  } // добавление новых карточек на сервер\n\n\n  addNewCards(data) {\n    return fetch(`${this._url}cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.title,\n        link: data.link\n      })\n    }).then(responce => {\n      // console.log(data)\n      return this._checkLineOk(responce);\n    });\n  } // удаление карточки \n\n\n  deleteCard(cardId) {\n    return fetch(`${this._url}cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(responce => {\n      return this._checkLineOk(responce);\n    });\n  } //добавление лайка \n\n\n  addLike(cardId) {\n    return fetch(`${this._url}cards/likes/${cardId}`, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(responce => {\n      return this._checkLineOk(responce);\n    });\n  } //удаление лайка \n\n\n  deleteLike(cardId) {\n    return fetch(`${this._url}cards/likes/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(responce => {\n      return this._checkLineOk(responce);\n    });\n  }\n\n}\n\nconst api = new Api({\n  url: \"https://mesto.nomoreparties.co/v1/cohort-30/\",\n  headers: {\n    'Content-Type': 'application/json',\n    // наш сервер ждет именно эту строчку (данные в формате json), некоторым серверам он не нужен для ответа\n    authorization: \"d54a6214-ca5f-4e1d-b1a3-3d2e1fdbd500\"\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/sasha/Desktop/Кодинг/mesto-react/src/utils/Api.js"],"names":["Api","constructor","config","_url","url","_headers","headers","_checkLineOk","responce","ok","json","Promise","reject","getUserInfo","fetch","method","then","getInitialCards","editUserInfo","data","body","JSON","stringify","name","about","editAvatar","avatar","addNewCards","title","link","deleteCard","cardId","addLike","deleteLike","api","authorization"],"mappings":"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","sourcesContent":[" class Api {\n  constructor (config) { \n    this._url = config.url;\n    this._headers = config.headers; \n  }\n\n  // отдельно выносим проверку, чтоб не писать ее каждый раз\n  _checkLineOk(responce) {\n    if (responce.ok) {  // если у объекта responce поле ок = истина\n      return responce.json(); // тогла возвращаем реальные данные (если не написать return в следующий промис не передадутся данные)\n    } return Promise.reject(`Ошибка: ${responce} `) // если статус не ок, возвращаем Promise.rejec (переводим в значение rejected (отклонено))\n  }\n\n  // получение данных профиля \n  getUserInfo() { // усли fetch ничего не возвращает, по умолчанию он вернет underfined\n    return fetch(`${this._url}users/me`, { // первый аргумент - куда направляем запрос\n      // второй аргумент - объект с настройками\n      method: \"GET\", // поумолчанию метод всегда GET, но лучше указывать, что б было явно видно\n      headers: this._headers\n    })\n    .then((responce) => {\n      return this._checkLineOk(responce)\n    }) //если сервер хоть чем-то ответил (даже статус 400), значит успешно, если сервер ничем не ответил, тогда fetch перейдет в значение rejected и мы перейдем в блок catch\n  }\n\n  // получение карточек \n  getInitialCards() { \n    return fetch(`${this._url}cards`, { \n      method: \"GET\",  \n      headers: this._headers\n    })\n    .then((responce) => {\n      return this._checkLineOk(responce)\n    }) \n  }\n\n  // редактирование данных профиля\n  editUserInfo(data) {   //чтобы передать данные на сервер нам необходимо по нашему api передавать в боди эти данные. \n    return fetch(`${this._url}users/me`, { \n      method: \"PATCH\", \n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    })\n    .then((responce) => {\n      return this._checkLineOk(responce)\n    }) \n  }\n\n  // редактирование аватара \n  editAvatar(data) {  \n    return fetch(`${this._url}users/me/avatar`, { \n      method: \"PATCH\", \n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }) \n    .then((responce) => {\n      return this._checkLineOk(responce)\n    }) \n  }\n\n  // добавление новых карточек на сервер\n  addNewCards(data) { \n    return fetch(`${this._url}cards`, { \n      method: \"POST\", \n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.title,\n        link: data.link\n      }) \n    })\n    .then((responce) => {\n     // console.log(data)\n      return this._checkLineOk(responce)\n    }) \n  }\n\n  // удаление карточки \n  deleteCard(cardId) {\n    return fetch(`${this._url}cards/${cardId}`, { \n      method: \"DELETE\", \n      headers: this._headers,\n    })\n    .then((responce) => {\n      return this._checkLineOk(responce)\n    }) \n  }\n\n  //добавление лайка \n  addLike(cardId) {\n    return fetch(`${this._url}cards/likes/${cardId}`, { \n      method: \"PUT\", \n      headers: this._headers,\n    })\n    .then((responce) => {\n      return this._checkLineOk(responce)\n    }) \n  }\n\n  //удаление лайка \n  deleteLike(cardId) {\n    return fetch(`${this._url}cards/likes/${cardId}`, { \n      method: \"DELETE\", \n      headers: this._headers,\n    })\n    .then((responce) => {\n      return this._checkLineOk(responce)\n    }) \n  }\n  }\n\n  const api = new Api ({\n    url: \"https://mesto.nomoreparties.co/v1/cohort-30/\",\n    headers: {\n      'Content-Type': 'application/json', // наш сервер ждет именно эту строчку (данные в формате json), некоторым серверам он не нужен для ответа\n      authorization: \"d54a6214-ca5f-4e1d-b1a3-3d2e1fdbd500\",\n    } \n  })\n\n  export default api\n"]},"metadata":{},"sourceType":"module"}