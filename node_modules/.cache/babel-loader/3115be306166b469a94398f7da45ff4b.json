{"ast":null,"code":"var _jsxFileName = \"/Users/sasha/Desktop/\\u041A\\u043E\\u0434\\u0438\\u043D\\u0433/mesto-react/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport '../index.css';\nimport Header from \"./Header.js\";\nimport Main from \"./Main.js\";\nimport Footer from \"./Footer.js\";\nimport PopupWithForm from \"./PopupWithForm.js\";\nimport ImagePopup from \"./ImagePopup.js\";\nimport CurrentUserContext from \"../contexts/CurrentUserContext.js\";\nimport api from \"../utils/Api.js\";\nimport EditProfilePopup from \"./EditProfilePopup.js\";\nimport EditAvatarPopup from \"./EditAvatarPopup.js\";\nimport AddPlacePopup from \"./AddPlacePopup.js\";\nimport DeleteCardPopup from \"./DeleteCardPopup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isDeleteCardPopupOpen, setIsDeleteCardPopupOpen] = React.useState(false);\n  const [selectedCard, setSelectedCard] = React.useState({\n    link: '',\n    name: ''\n  });\n  const [currentUser, setCurrentUser] = React.useState({});\n  const [cards, setCards] = React.useState([]);\n  React.useEffect(() => {\n    // Получаем данные с сервера (Данные профиля + данные карточек)\n    Promise.all([api.getUserInfo(), api.getInitialCards()]).then(data => {\n      setCurrentUser({\n        name: data[0].name,\n        about: data[0].about,\n        avatar: data[0].avatar\n      });\n      setCards(data[1]);\n    }).catch(err => {\n      console.log(`Ошибка: ${err}`);\n    });\n  }, []); // второй параметр в хуке указываем пустой массив, чтоб не отправлялось куча запросов, а только один. \n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  function handleDeleteCardClick() {\n    setIsDeleteCardPopupOpen(t);\n  }\n\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard({\n      link: '',\n      name: ''\n    });\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  } // отправляем данные профиля на сервер\n\n\n  function handleUpdateUser(user) {\n    api.editUserInfo(user).then(user => {\n      setCurrentUser(user);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(`Ошибка: ${err}`);\n    });\n  }\n\n  function handleUpdateAvatar(avatar) {\n    api.editAvatar(avatar).then(avatar => {\n      setCurrentUser(avatar);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(`Ошибка: ${err}`);\n    });\n  }\n\n  function handleAddPlaceSubmit(newCard) {\n    api.addNewCards(newCard).then(newCard => {\n      setCards([newCard, ...cards]);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(`Ошибка: ${err}`);\n    });\n  }\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id); // Отправляем запрос в API и получаем обновлённые данные карточки\n\n    api.changeLikeCardStatus(card._id, !isLiked).then(newCard => {\n      setCards(state => state.map(c => c._id === card._id ? newCard : c));\n    }).catch(err => {\n      console.log(`Ошибка: ${err}`);\n    });\n  }\n\n  function handleCardDelete(card) {\n    api.deleteCard(card._id).then(() => {\n      const newCards = cards.filter(event => event._id !== card._id);\n      setCards(newCards);\n    }).catch(err => {\n      console.log(`Ошибка: ${err}`);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contents\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Main, {\n          onEditProfile: handleEditProfileClick,\n          onEditAvatar: handleEditAvatarClick,\n          onAddPlace: handleAddPlaceClick,\n          onCardClick: handleCardClick,\n          onCardLike: handleCardLike,\n          onCardDelete: handleCardDelete,\n          cards: cards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup // попап редактирования профиля\n      , {\n        isOpen: isEditProfilePopupOpen,\n        onClose: closeAllPopups,\n        onUpdateUser: handleUpdateUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup // попап добавления карточек\n      , {\n        isOpen: isAddPlacePopupOpen,\n        onClose: closeAllPopups,\n        onAddPlace: handleAddPlaceSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DeleteCardPopup // попап подтверждения удаления \n      , {\n        isOpen: isAddPlacePopupOpen,\n        onClose: closeAllPopups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup // попап аватара\n      , {\n        isOpen: isEditAvatarPopupOpen,\n        onClose: closeAllPopups,\n        onUpdateAvatar: handleUpdateAvatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImagePopup // попап фулскрин картинки\n      , {\n        card: selectedCard,\n        onClose: closeAllPopups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EMbPu5OX74s+AW+Qi5dMQXKsH4A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sasha/Desktop/Кодинг/mesto-react/src/components/App.js"],"names":["React","Header","Main","Footer","PopupWithForm","ImagePopup","CurrentUserContext","api","EditProfilePopup","EditAvatarPopup","AddPlacePopup","DeleteCardPopup","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","useState","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isDeleteCardPopupOpen","setIsDeleteCardPopupOpen","selectedCard","setSelectedCard","link","name","currentUser","setCurrentUser","cards","setCards","useEffect","Promise","all","getUserInfo","getInitialCards","then","data","about","avatar","catch","err","console","log","handleEditProfileClick","handleAddPlaceClick","handleEditAvatarClick","handleDeleteCardClick","t","closeAllPopups","handleCardClick","card","handleUpdateUser","user","editUserInfo","handleUpdateAvatar","editAvatar","handleAddPlaceSubmit","newCard","addNewCards","handleCardLike","isLiked","likes","some","i","_id","changeLikeCardStatus","state","map","c","handleCardDelete","deleteCard","newCards","filter","event"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../index.css';\nimport Header from \"./Header.js\";\nimport Main from \"./Main.js\";\nimport Footer from \"./Footer.js\";\nimport PopupWithForm from \"./PopupWithForm.js\";\nimport ImagePopup from \"./ImagePopup.js\";\nimport CurrentUserContext from \"../contexts/CurrentUserContext.js\";\nimport api from \"../utils/Api.js\"\nimport EditProfilePopup from \"./EditProfilePopup.js\";\nimport EditAvatarPopup from \"./EditAvatarPopup.js\";\nimport AddPlacePopup from \"./AddPlacePopup.js\";\nimport DeleteCardPopup from \"./DeleteCardPopup\";\n\nfunction App() {\n\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isDeleteCardPopupOpen, setIsDeleteCardPopupOpen] = React.useState(false);\n  const [selectedCard, setSelectedCard] = React.useState({link: '', name: ''});\n\n  const [currentUser, setCurrentUser] = React.useState({});\n  const [cards, setCards] = React.useState([]);\n\n  React.useEffect(() => {\n    // Получаем данные с сервера (Данные профиля + данные карточек)\n    Promise.all([api.getUserInfo(), api.getInitialCards()])\n    .then((data) => {\n      setCurrentUser({\n          name: data[0].name,\n          about: data[0].about,\n          avatar: data[0].avatar\n      });\n      setCards(data[1]);\n  })\n  .catch((err) => {\n    console.log(`Ошибка: ${err}`);\n  })\n  }, []) // второй параметр в хуке указываем пустой массив, чтоб не отправлялось куча запросов, а только один. \n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true)\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true)\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true)\n  }\n\n  function handleDeleteCardClick() {\n    setIsDeleteCardPopupOpen(t)\n  }\n\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false)\n    setIsAddPlacePopupOpen(false)\n    setIsEditAvatarPopupOpen(false)\n    setSelectedCard({link: '', name: ''});\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n\n  // отправляем данные профиля на сервер\n  function handleUpdateUser(user) {\n    api.editUserInfo(user)\n      .then((user) => {\n        setCurrentUser(user);\n        closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(`Ошибка: ${err}`);\n      })\n  }\n\n  function handleUpdateAvatar(avatar) {\n    api.editAvatar(avatar)\n      .then((avatar) => {\n        setCurrentUser(avatar);\n        closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(`Ошибка: ${err}`);\n      })\n  }\n\n  function handleAddPlaceSubmit(newCard) {\n    api.addNewCards(newCard)\n      .then((newCard) => {\n        setCards([newCard, ...cards]);\n        closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(`Ошибка: ${err}`);\n      })\n  }\n\n  \n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.changeLikeCardStatus(card._id, !isLiked)\n      .then((newCard) => {\n        setCards((state) => state.map((c) => c._id === card._id ? newCard : c));\n      })\n      .catch((err) => {\n        console.log(`Ошибка: ${err}`);\n      })\n}\n\n\n  function handleCardDelete(card) {\n    api.deleteCard(card._id)\n    .then(() => {\n      const newCards = cards.filter((event) => event._id !== card._id);\n        setCards(newCards);\n    })\n    .catch((err) => {\n      console.log(`Ошибка: ${err}`);\n    })\n  }\n\n  \n\n  return (\n    <CurrentUserContext.Provider value = {currentUser}>\n      <div className=\"contents\">\n        <div className=\"page\">\n          <Header/>\n          <Main \n            onEditProfile={ handleEditProfileClick }\n            onEditAvatar={ handleEditAvatarClick }\n            onAddPlace={ handleAddPlaceClick }\n            onCardClick={ handleCardClick }\n            onCardLike={ handleCardLike }\n            onCardDelete={ handleCardDelete }\n            cards={ cards }\n           />\n          <Footer/>\n        </div>\n        <EditProfilePopup  // попап редактирования профиля\n          isOpen={isEditProfilePopupOpen} \n          onClose={closeAllPopups}\n          onUpdateUser={handleUpdateUser} />\n        <AddPlacePopup // попап добавления карточек\n          isOpen={isAddPlacePopupOpen} \n          onClose={closeAllPopups}\n          onAddPlace={handleAddPlaceSubmit} \n          />\n        <DeleteCardPopup  // попап подтверждения удаления \n        isOpen={isAddPlacePopupOpen} \n        onClose={closeAllPopups}\n        \n        />\n        <EditAvatarPopup // попап аватара\n          isOpen={isEditAvatarPopupOpen} \n          onClose={closeAllPopups}\n          onUpdateAvatar={handleUpdateAvatar} />\n        <ImagePopup // попап фулскрин картинки\n           card={selectedCard}\n           onClose={closeAllPopups}\n        />\n      </div> \n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}