{"ast":null,"code":"import _slicedToArray from\"/Users/sasha/Desktop/\\u041A\\u043E\\u0434\\u0438\\u043D\\u0433/mesto-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import PopupWithForm from\"./PopupWithForm.js\";import CurrentUserContext from'../contexts/CurrentUserContext.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function EditProfilePopup(props){var currentUser=React.useContext(CurrentUserContext);// Подписываемся на контекст CurrentUserContext\n// После загрузки текущего пользователя из API его данные будут использованы в управляемых компонентах.\n// данные со страницы будут отображаться в полях формы\nReact.useEffect(function(){setName(currentUser.name);setDescription(currentUser.about);},[currentUser,props.isOpen]);// Стейт, в котором содержится значение инпута\nvar _React$useState=React.useState(\"\"),_React$useState2=_slicedToArray(_React$useState,2),name=_React$useState2[0],setName=_React$useState2[1];var _React$useState3=React.useState(\"\"),_React$useState4=_slicedToArray(_React$useState3,2),description=_React$useState4[0],setDescription=_React$useState4[1];// Обработчик изменения инпута обновляет стейт\nfunction handleChangeName(event){setName(event.target.value);}function handleChangeDescription(event){setDescription(event.target.value);}function handleSubmit(event){// Запрещаем браузеру переходить по адресу формы (перезагружать страницу)\nevent.preventDefault();// Передаём значения управляемых компонентов во внешний обработчик\nprops.onUpdateUser({name:name,about:description});}return/*#__PURE__*/_jsxs(PopupWithForm// попап редактирования профиля\n,{name:\"profile\",nameForm:\"edit-form\",title:\"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043F\\u0440\\u043E\\u0444\\u0438\\u043B\\u044C\",button:\"save\",text:\"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\",isOpen:props.isOpen,onClose:props.onClose,onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"edit-name\",name:\"name\",placeholder:\"\\u0416\\u0430\\u043A-\\u0418\\u0432 \\u041A\\u0443\\u0441\\u0442\\u043E\",className:\"popup__input popup__input_type_name\",required:true,minLength:\"2\",maxLength:\"40\",value:\"\".concat(name),onChange:handleChangeName}),/*#__PURE__*/_jsx(\"span\",{id:\"edit-description-error\",className:\"error\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"edit-description\",name:\"about\",placeholder:\"\\u0418\\u0441\\u0441\\u043B\\u0435\\u0434\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C \\u043E\\u043A\\u0435\\u0430\\u043D\\u0430\",className:\"popup__input popup__input_type_description\",required:true,minLength:\"2\",maxLength:\"200\",value:\"\".concat(description),onChange:handleChangeDescription}),/*#__PURE__*/_jsx(\"span\",{id:\"edit-description-error\",className:\"error\"})]});}export default EditProfilePopup;","map":{"version":3,"sources":["/Users/sasha/Desktop/Кодинг/mesto-react/src/components/EditProfilePopup.js"],"names":["React","PopupWithForm","CurrentUserContext","EditProfilePopup","props","currentUser","useContext","useEffect","setName","name","setDescription","about","isOpen","useState","description","handleChangeName","event","target","value","handleChangeDescription","handleSubmit","preventDefault","onUpdateUser","onClose"],"mappings":"2JAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,aAAP,KAA0B,oBAA1B,CACA,MAAOC,CAAAA,kBAAP,KAA+B,mCAA/B,C,wFAGA,QAASC,CAAAA,gBAAT,CAA0BC,KAA1B,CAAiC,CAC/B,GAAMC,CAAAA,WAAW,CAAGL,KAAK,CAACM,UAAN,CAAiBJ,kBAAjB,CAApB,CAA0D;AAE5D;AACA;AACAF,KAAK,CAACO,SAAN,CAAgB,UAAM,CACpBC,OAAO,CAACH,WAAW,CAACI,IAAb,CAAP,CACAC,cAAc,CAACL,WAAW,CAACM,KAAb,CAAd,CACD,CAHD,CAGG,CAACN,WAAD,CAAcD,KAAK,CAACQ,MAApB,CAHH,EAKE;AACA,oBAAwBZ,KAAK,CAACa,QAAN,CAAe,EAAf,CAAxB,oDAAOJ,IAAP,qBAAaD,OAAb,qBACA,qBAAuCR,KAAK,CAACa,QAAN,CAAe,EAAf,CAAvC,qDAAOC,WAAP,qBAAoBJ,cAApB,qBAEA;AACA,QAASK,CAAAA,gBAAT,CAA0BC,KAA1B,CAAiC,CAC/BR,OAAO,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP,CACD,CAED,QAASC,CAAAA,uBAAT,CAAiCH,KAAjC,CAAwC,CACtCN,cAAc,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd,CACD,CAED,QAASE,CAAAA,YAAT,CAAsBJ,KAAtB,CAA6B,CAC3B;AACAA,KAAK,CAACK,cAAN,GAEA;AACAjB,KAAK,CAACkB,YAAN,CAAmB,CACjBb,IAAI,CAAJA,IADiB,CAEjBE,KAAK,CAAEG,WAFU,CAAnB,EAID,CAED,mBACE,MAAC,aAAc;AAAf,EACE,IAAI,CAAC,SADP,CAEE,QAAQ,CAAC,WAFX,CAGE,KAAK,CAAC,2HAHR,CAIE,MAAM,CAAC,MAJT,CAKE,IAAI,CAAC,wDALP,CAME,MAAM,CAAEV,KAAK,CAACQ,MANhB,CAOE,OAAO,CAAER,KAAK,CAACmB,OAPjB,CAQE,QAAQ,CAAEH,YARZ,wBAUE,cACE,IAAI,CAAC,MADP,CAEE,EAAE,CAAC,WAFL,CAGE,IAAI,CAAC,MAHP,CAIE,WAAW,CAAC,gEAJd,CAKE,SAAS,CAAC,qCALZ,CAME,QAAQ,KANV,CAOE,SAAS,CAAC,GAPZ,CAQE,SAAS,CAAC,IARZ,CASE,KAAK,WAAKX,IAAL,CATP,CAUE,QAAQ,CAAEM,gBAVZ,EAVF,cAqBE,aAAM,EAAE,CAAC,wBAAT,CAAkC,SAAS,CAAC,OAA5C,EArBF,cAsBE,cACE,IAAI,CAAC,MADP,CAEE,EAAE,CAAC,kBAFL,CAGE,IAAI,CAAC,OAHP,CAIE,WAAW,CAAC,qHAJd,CAKE,SAAS,CAAC,4CALZ,CAME,QAAQ,KANV,CAOE,SAAS,CAAC,GAPZ,CAQE,SAAS,CAAC,KARZ,CASE,KAAK,WAAKD,WAAL,CATP,CAUE,QAAQ,CAAEK,uBAVZ,EAtBF,cAiCE,aAAM,EAAE,CAAC,wBAAT,CAAkC,SAAS,CAAC,OAA5C,EAjCF,GADF,CAqCD,CAED,cAAehB,CAAAA,gBAAf","sourcesContent":["import React from \"react\";\nimport PopupWithForm from \"./PopupWithForm.js\";\nimport CurrentUserContext from '../contexts/CurrentUserContext.js';\n\n\nfunction EditProfilePopup(props) {\n  const currentUser = React.useContext(CurrentUserContext); // Подписываемся на контекст CurrentUserContext\n\n// После загрузки текущего пользователя из API его данные будут использованы в управляемых компонентах.\n// данные со страницы будут отображаться в полях формы\nReact.useEffect(() => {\n  setName(currentUser.name);\n  setDescription(currentUser.about);\n}, [currentUser, props.isOpen]); \n\n  // Стейт, в котором содержится значение инпута\n  const [name, setName] = React.useState(\"\");\n  const [description, setDescription ] = React.useState(\"\");\n\n  // Обработчик изменения инпута обновляет стейт\n  function handleChangeName(event) {\n    setName(event.target.value);\n  }\n  \n  function handleChangeDescription(event) {\n    setDescription(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    // Запрещаем браузеру переходить по адресу формы (перезагружать страницу)\n    event.preventDefault();\n  \n    // Передаём значения управляемых компонентов во внешний обработчик\n    props.onUpdateUser({\n      name,\n      about: description,\n    });\n  }\n\n  return(\n    <PopupWithForm // попап редактирования профиля\n      name=\"profile\"\n      nameForm=\"edit-form\"\n      title=\"Редактировать профиль\"\n      button=\"save\"\n      text=\"Сохранить\"\n      isOpen={props.isOpen}\n      onClose={props.onClose}\n      onSubmit={handleSubmit}\n    >\n      <input\n        type=\"text\"\n        id=\"edit-name\"\n        name=\"name\"\n        placeholder=\"Жак-Ив Кусто\"\n        className=\"popup__input popup__input_type_name\" \n        required  \n        minLength=\"2\" \n        maxLength=\"40\"\n        value={`${name}`} \n        onChange={handleChangeName}/>\n      <span id=\"edit-description-error\" className=\"error\"></span>\n      <input\n        type=\"text\" \n        id=\"edit-description\" \n        name=\"about\" \n        placeholder=\"Исследователь океана\" \n        className=\"popup__input popup__input_type_description\" \n        required  \n        minLength=\"2\" \n        maxLength=\"200\"\n        value={`${description}`}\n        onChange={handleChangeDescription} />\n      <span id=\"edit-description-error\" className=\"error\"></span>\n    </PopupWithForm>\n  )\n}\n\nexport default EditProfilePopup;"]},"metadata":{},"sourceType":"module"}