{"ast":null,"code":"import _slicedToArray from\"/Users/sasha/Desktop/\\u041A\\u043E\\u0434\\u0438\\u043D\\u0433/mesto-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import PopupWithForm from\"./PopupWithForm.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function AddPlacePopup(props){// Стейт, в котором содержится значение инпута\nvar _React$useState=React.useState(\"\"),_React$useState2=_slicedToArray(_React$useState,2),nameCard=_React$useState2[0],setNameCard=_React$useState2[1];var _React$useState3=React.useState(\"\"),_React$useState4=_slicedToArray(_React$useState3,2),linkCard=_React$useState4[0],setLinkCard=_React$useState4[1];// при отерытии попапа поле будет пустое\nReact.useEffect(function(){setNameCard(\"\");setLinkCard(\"\");},[props.isOpen]);//Если у хука не указаны зависимости, он будет вызван после каждого рендера и мы не сможем нисего написавть в поле\n// Обработчик изменения инпута обновляет стейт\nfunction handleChangeNameCard(event){setNameCard(event.target.value);}function handleChangeLinkCard(event){setLinkCard(event.target.value);}function handleSubmit(event){// Запрещаем браузеру переходить по адресу формы (перезагружать страницу)\nevent.preventDefault();// Передаём значения управляемых компонентов во внешний обработчик\nprops.onAddPlace({name:nameCard,link:linkCard});}return/*#__PURE__*/_jsxs(PopupWithForm// попап добавления карточек\n,{name:\"cards\",nameForm:\"add-form\",title:\"\\u041D\\u043E\\u0432\\u043E\\u0435 \\u043C\\u0435\\u0441\\u0442\\u043E\",button:\"create\",text:\"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C\",isOpen:props.isOpen,onClose:props.onClose,onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"edit-title\",name:\"title\",placeholder:\"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\",className:\"popup__input popup__input_type_title\",required:true,minLength:\"2\",maxLength:\"30\",value:\"\".concat(nameCard),onChange:handleChangeNameCard}),/*#__PURE__*/_jsx(\"span\",{id:\"edit-title-error\",className:\"error\"}),/*#__PURE__*/_jsx(\"input\",{type:\"url\",id:\"edit-link\",name:\"link\",placeholder:\"\\u0421\\u0441\\u044B\\u043B\\u043A\\u0430 \\u043D\\u0430 \\u043A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0443\",className:\"popup__input popup__input_type_link\",required:true,value:\"\".concat(linkCard),onChange:handleChangeLinkCard}),/*#__PURE__*/_jsx(\"span\",{id:\"edit-link-error\",className:\"error\"})]});}export default AddPlacePopup;","map":{"version":3,"sources":["/Users/sasha/Desktop/Кодинг/mesto-react/src/components/AddPlacePopup.js"],"names":["React","PopupWithForm","AddPlacePopup","props","useState","nameCard","setNameCard","linkCard","setLinkCard","useEffect","isOpen","handleChangeNameCard","event","target","value","handleChangeLinkCard","handleSubmit","preventDefault","onAddPlace","name","link","onClose"],"mappings":"2JAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,aAAP,KAA0B,oBAA1B,C,wFAEA,QAASC,CAAAA,aAAT,CAAwBC,KAAxB,CAA+B,CAG7B;AACA,oBAAgCH,KAAK,CAACI,QAAN,CAAe,EAAf,CAAhC,oDAAOC,QAAP,qBAAiBC,WAAjB,qBACA,qBAAiCN,KAAK,CAACI,QAAN,CAAe,EAAf,CAAjC,qDAAOG,QAAP,qBAAiBC,WAAjB,qBAEA;AACAR,KAAK,CAACS,SAAN,CAAgB,UAAM,CACpBH,WAAW,CAAC,EAAD,CAAX,CACAE,WAAW,CAAC,EAAD,CAAX,CACD,CAHD,CAGG,CAACL,KAAK,CAACO,MAAP,CAHH,EAGoB;AAEpB;AACA,QAASC,CAAAA,oBAAT,CAA8BC,KAA9B,CAAqC,CACnCN,WAAW,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX,CACD,CAED,QAASC,CAAAA,oBAAT,CAA8BH,KAA9B,CAAqC,CACnCJ,WAAW,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX,CACD,CAED,QAASE,CAAAA,YAAT,CAAsBJ,KAAtB,CAA6B,CAC3B;AACAA,KAAK,CAACK,cAAN,GAEA;AACAd,KAAK,CAACe,UAAN,CAAiB,CACfC,IAAI,CAAEd,QADS,CAEfe,IAAI,CAAEb,QAFS,CAAjB,EAID,CAED,mBACE,MAAC,aAAc;AAAf,EACE,IAAI,CAAC,OADP,CAEE,QAAQ,CAAC,UAFX,CAGE,KAAK,CAAC,+DAHR,CAIE,MAAM,CAAC,QAJT,CAKE,IAAI,CAAC,4CALP,CAME,MAAM,CAAEJ,KAAK,CAACO,MANhB,CAOE,OAAO,CAAEP,KAAK,CAACkB,OAPjB,CAQE,QAAQ,CAAEL,YARZ,wBAUE,cACE,IAAI,CAAC,MADP,CAEE,EAAE,CAAC,YAFL,CAGE,IAAI,CAAC,OAHP,CAIE,WAAW,CAAC,kDAJd,CAKE,SAAS,CAAC,sCALZ,CAME,QAAQ,KANV,CAOE,SAAS,CAAC,GAPZ,CAQE,SAAS,CAAC,IARZ,CASE,KAAK,WAAKX,QAAL,CATP,CAUE,QAAQ,CAAEM,oBAVZ,EAVF,cAqBE,aAAM,EAAE,CAAC,kBAAT,CAA4B,SAAS,CAAC,OAAtC,EArBF,cAsBE,cACE,IAAI,CAAC,KADP,CAEE,EAAE,CAAC,WAFL,CAGE,IAAI,CAAC,MAHP,CAIE,WAAW,CAAC,oGAJd,CAKE,SAAS,CAAC,qCALZ,CAME,QAAQ,KANV,CAOE,KAAK,WAAKJ,QAAL,CAPP,CAQE,QAAQ,CAAEQ,oBARZ,EAtBF,cA+BE,aAAM,EAAE,CAAC,iBAAT,CAA2B,SAAS,CAAC,OAArC,EA/BF,GADF,CAmCD,CAED,cAAeb,CAAAA,aAAf","sourcesContent":["import React from \"react\";\nimport PopupWithForm from \"./PopupWithForm.js\";\n\nfunction AddPlacePopup (props) {\n  \n\n  // Стейт, в котором содержится значение инпута\n  const [nameCard, setNameCard] = React.useState(\"\");\n  const [linkCard, setLinkCard ] = React.useState(\"\")\n\n  // при отерытии попапа поле будет пустое\n  React.useEffect(() => {\n    setNameCard(\"\");\n    setLinkCard(\"\");\n  }, [props.isOpen]); //Если у хука не указаны зависимости, он будет вызван после каждого рендера и мы не сможем нисего написавть в поле\n\n  // Обработчик изменения инпута обновляет стейт\n  function handleChangeNameCard(event) {\n    setNameCard(event.target.value);\n  }\n  \n  function handleChangeLinkCard(event) {\n    setLinkCard(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    // Запрещаем браузеру переходить по адресу формы (перезагружать страницу)\n    event.preventDefault();\n  \n    // Передаём значения управляемых компонентов во внешний обработчик\n    props.onAddPlace({\n      name: nameCard,\n      link: linkCard,\n    });\n  }\n  \n  return(\n    <PopupWithForm // попап добавления карточек\n      name=\"cards\"\n      nameForm=\"add-form\"\n      title=\"Новое место\"\n      button=\"create\"\n      text=\"Создать\"\n      isOpen={props.isOpen}\n      onClose={props.onClose}\n      onSubmit={handleSubmit}\n    >\n      <input \n        type=\"text\" \n        id=\"edit-title\" \n        name=\"title\" \n        placeholder=\"Название\" \n        className=\"popup__input popup__input_type_title\" \n        required  \n        minLength=\"2\" \n        maxLength=\"30\"\n        value={`${nameCard}`} \n        onChange={handleChangeNameCard}/>\n      <span id=\"edit-title-error\" className=\"error\"></span>\n      <input \n        type=\"url\" \n        id=\"edit-link\" \n        name=\"link\" \n        placeholder=\"Ссылка на картинку\" \n        className=\"popup__input popup__input_type_link\" \n        required\n        value={`${linkCard}`} \n        onChange={handleChangeLinkCard} />\n      <span id=\"edit-link-error\" className=\"error\"></span>\n    </PopupWithForm>\n  )\n}\n\nexport default AddPlacePopup\n"]},"metadata":{},"sourceType":"module"}